pbinom(4, 5, 0.5)
pbinom(5,5,0.5)
choose(5,4)*0.5^4*0.5^1+choose(5,5)*0.5^5*0.5^0
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference<-g2-g1
mean(difference)
sd(difference)
s<-sd(difference)
mn + c(-1. 1)*qt(0.975,9)*s/sqrt(10)
mn + c(-1, 1)*qt(0.975,9)*s/sqrt(10)
t.test(difference)
t.test(difference)$conf.int
swirl()
1
hist(rexp(1000, 0.2), main="Exponential Distribution", xlab="n = 1000, Lambda = 0.2")
mns<-NULL
sds<-NULL
for(i in 1:1000) {
set.seed(i)
mns<-c(mns, mean(rexp(40,0.2)))
set.seed(i)
sds<-c(sds, sd(rexp(40,0.2)))
}
hist(mns, main="The Simulated Means Distributions", xlab="A 1000 Simulations of Exponential Distribution of n = 40, Lambda = 0.2")
xfit<-seq(min(mns),max(mns),length=length(mns))
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
lines(xfit, yfit, col="blue", lwd=2)
yfit <- yfit*diff(h$mids[1:2])*length(mns)
h<-hist(mns, main="The Simulated Means Distributions", xlab="A 1000 Simulations of Exponential Distribution of n = 40, Lambda = 0.2")
yfit <- yfit*diff(h$mids[1:2])*length(mns)
lines(xfit, yfit, col="blue", lwd=2)
library(RDatasets)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
data("ToothGrowth")
sampledata<-data("ToothGrowth")
head(sampledata)
sampledata
head("ToothGrowth")
data("ToothGrowth")
head(ToothGrowth)
ToothGrowth
d<-density(ToothGrowth$len)
plot(d)
plot(d, main = "kernal Density of Tooth Grow Length")
polygon(d, col="red", border="blue")
dose.f<-factor(ToothGrowth$dose, levels=c(0.5, 1.0, 2.0), labels=c("dose 0.5", "dose 1.0", "dose 2.0"))
sm.density.compare(ToothGrowth$len, ToothGrowth$dose, xlab="Tooth Grow Length")
install.packages(sm)
install.packages("sm")
sm.density.compare(ToothGrowth$len, ToothGrowth$dose, xlab="Tooth Grow Length")
library(sm)
sm.density.compare(ToothGrowth$len, ToothGrowth$dose, xlab="Tooth Grow Length")
title(main="Tooth Growth Length by Dose")
colfill<-c(2:(2+length(levels(dose.f))))
legend(locator(1), levels(dose.f), fill=colfill)
sm.density.compare(ToothGrowth$len, ToothGrowth$supp, xlab="Tooth Growth Length")
title(main="Tooth Growth Length by Supplement")
dose.f<-factor(ToothGrowth$dose, levels=c(0.5, 1.0, 2.0), labels=c("dose 0.5", "dose 1.0", "dose 2.0"))
sm.density.compare(ToothGrowth$len, ToothGrowth$dose, xlab="Tooth Growth Length")
title(main="Tooth Growth Length by Dose")
colfill<-c(2:(2+length(levels(dose.f))))
legend("topright", levels(dose.f), fill=colfill)
legend("topright", bty ="n", lty =c(1,1), lwd= c(2.5, 2.5),levels(dose.f))
legend("topright", bty ="n", lty =c(1,1), lwd= c(2.5, 2.5), col =c("Red", "Green", "Blue"),levels(dose.f))
dose.f<-factor(ToothGrowth$dose, levels=c(0.5, 1.0, 2.0), labels=c("dose 0.5", "dose 1.0", "dose 2.0"))
sm.density.compare(ToothGrowth$len, ToothGrowth$dose, xlab="Tooth Growth Length")
title(main="Tooth Growth Length by Dose")
legend("topright", bty ="n", lty =c(1,1), lwd= c(2.5, 2.5), col =c("Red", "Green", "Blue"),levels(dose.f))
sm.density.compare(ToothGrowth$len, ToothGrowth$supp, xlab="Tooth Growth Length")
title(main="Tooth Growth Length by Supplement")
legend("topright", bty ="n", lty =c(1,1), lwd= c(2.5, 2.5), col =c("Red", "Green""),levels(ToothGrowth$supp))
legend("topright", bty ="n", lty =c(1,1), lwd= c(2.5, 2.5), col =c("Red", "Green"),levels(ToothGrowth$supp))
table(ToothGrowth)
summary(ToothGrowth)
table(ToothGrowth, ToothGrowth$supp, ToothGrowth$dose)
table(ToothGrowth, ToothGrowth$supp)
t.test(ToothGrowth$len~ToothGrowth$supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)$conf
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)$conf
dosecompare01<-subset(ToothGrowth, dose %in% c(0.5,1))
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = dosecompare01)$conf
dosecompare02<-subset(ToothGrowth, dose %in% c(0.5,2))
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = dosecompare02)$conf
dosecompare03<-subset(ToothGrowth, dose %in% c(1,2))
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = dosecompare03)$conf
summary(dosecompare01)
summary(dosecompare02)
summary(dosecompare03)
ls(len~dose, data=ToothGrowth)
?ls
lm(len~dose, data=ToothGrowth)
rbind(
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = ToothGrowth)$conf,
t.test(len~supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)$conf
)
rbind(
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = dosecompare01)$conf,
t.test(len~supp, paired = FALSE, var.equal = FALSE, data = dosecompare01)$conf
)
rbind(
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = dosecompare02)$conf,
t.test(len~supp, paired = FALSE, var.equal = FALSE, data = dosecompare02)$conf
)
dosecompare03<-subset(ToothGrowth, dose %in% c(1,2))
rbind(
t.test(len~supp, paired = FALSE, var.equal = TRUE, data = dosecompare03)$conf,
t.test(len~supp, paired = FALSE, var.equal = FALSE, data = dosecompare03)$conf
)
rbind(
t.test(len~dose, paired = FALSE, var.equal = TRUE, data = dosecompare01)$conf,
t.test(len~dose, paired = FALSE, var.equal = FALSE, data = dosecompare01)$conf
)
dosecompare02<-subset(ToothGrowth, dose %in% c(0.5,2))
rbind(
t.test(len~dose, paired = FALSE, var.equal = TRUE, data = dosecompare02)$conf,
t.test(len~dose, paired = FALSE, var.equal = FALSE, data = dosecompare02)$conf
)
dosecompare03<-subset(ToothGrowth, dose %in% c(1,2))
rbind(
t.test(len~dose, paired = FALSE, var.equal = TRUE, data = dosecompare03)$conf,
t.test(len~dose, paired = FALSE, var.equal = FALSE, data = dosecompare03)$conf
)
install.packages("sm")
install.packages(sm)
install.packages("sm")
install.packages("UsingR")
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
f1<-lm(y~x)
f1
summary(f1)
data("mtcars")
fit1<-lm(mpg~wt,data=mtcars)
summary(f1)
f2<_lm(mpg~I(wt-mean(wt),data=mtcars))
f2<-lm(mpg~I(wt-mean(wt),data=mtcars))
f2<-lm(mpg~I(wt-mean(wt),data=mtcars)
_
f2<-lm(mpg~I(wt-mean(wt)),data=mtcars)
summary(f2)
confint(f2)
mtcars
help(mtcars)
f3<-lm(mpg~I(wt-3000,data=mtcars)
)
f3<-lm(mpg~I(wt-3000),data=mtcars)
confint(f3)
f3<-lm(mpg~I(wt-3),data=mtcars)
confint(f3)
newdata<-data.frame(wt=3)
predict(mpg.lm, newdata, interval="confidence")
predict(mpg.fit1, newdata, interval="confidence")
predict(fit1, newdata, interval="confidence")
f3<-lm(mpg~I(wt*0.5),data=mtcars)
f3
coifint(f3)
coefint(f3)
confint(f3)
summary(f1)
f0<-lm(mpg~wt-1, data = mtcars)
summary(f0)
f0<-lm(mpg~1, data = mtcars)
summary(f0)
summary(f1)
predict(fit1, newdata = data.frame(wt = 3), interval = "prediction")
data("mtcars")
str(mtcars)
head(mtcars)
summary(mtcars)
require(ggplot2)
require(sm)
require(dplyr)
require(stats)
d<-density(mtcars$mpg)
plot(d, main = "Kernal Density of MPG")
polygon(d, col="red", border="blue")
swirl()
library(swirl)
swirl()
swirl()
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
sa
SA
sA
summary(InsectSprays[,2])
sapply(InsectSprays, )
sapply(InsectSprays, colSums(InsectSprays))
sapply(InsectSprays, class)
fit<-lm(count~spray, data = InsectSprays)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1, data = InsectSprays)
summary(nfit)$coef
spray2<-relevle(InsectSprays$spray, "c")
spray2<-relevel(InsectSprays$spray, "c")
spray2<-relevel(InsectSprays$spray, ref = "c")
spray2<-relevel(InsectSprays$spray, ref = "C")
fit2<-lm(count~spray2, data=InsectSprays)
summary(fit2)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~year, data=hunger)
fit<-lm(Numeric~Year, data=hunger)
summary(fit)$coef
lmf<-lm(hunger~year, data=x[hunger$Sex=="Female"])
lmf<-lm(hunger~year, data=hunder[hunger$Sex=="Female"])
lmf<-lm(hunger~year, data=hunger[hunger$Sex=="Female"])
lmf<-lm(hunger~year, data=hunger[,$Sex=="Female"])
lmf<-lm(hunger~year, data=hunger[,Sex=="Female"])
lmf<-lm(hunger~year, data=hunger[,hunger$Sex=="Female"])
lmf<-lm(hunger~year, data=hunger[hunger$Sex=="Female"])
lmf<-lm(hunger~year, data=[hunger$Sex=="Female"])
lmf<-lm(hunger~year, data=x[hunger$Sex=="Female"])
lmf<-lm(hunger~year, data=x)
lmf<-lm(Numeric~Year, data=x[hunger$Sex=="Female"])
lmf<-lm(Numeric~Year, data=hunger[hunger$Sex=="Female"])
hunger$Sex
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year[hunger$Sex=="Male"])
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year, Sex, Sex*Year, hunger)
lmInter<-lm(Numeric~Year, Sex, Sex*Year, data=hunger)
lmInter<-lm(Numeric~Year, Sex, Sex*Year, data=hunger)
lmInter<-lm(Numeric~Year+Sex+Year*Sex, data=hunger)
summary(lmInter)
fit<-lm(mpg~cyl+wt, data=mtcars)
summary(fit)
dim(mtcars)
mtcars
str(mtcars)
levels(mtcars$cyl)
mtcars$cyl<-factor(mtcars$cyl)
fit<-lm(mpg~cyl+wt, data=mtcars)
summary(fit)
fit1<-lm(mpg~cyl, data=mtcars)
summary(fit1)
summary(fit1)$coef
summary(fit)$coef
fit2<-lm(mpg~cyl+wt+wt*cyl, data=mtcars)
summary(f2)
summary(f1)
summary(fit)
summary(fit2)
require(lmtest)
a<-lrtest(fit,fit2)
a<-lrrtest(fit,fit2)
lrtest(fit2, fit)
install.packages(lmtest)
install.packages("lmtest")
library(lmtest)
lrtest(fit2, fit)
?mtcars
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
round((dfbetas(fit)))
round((dfbetas(fit)[1:5],3))
round((dfbetas(fit)[1:10],3))
round((dfbetas(fit)[1:10,2],3))
plot(x,y)
abline(lm(y~x))
round((dfbetas(fit)[1:5,2],3))
round(hatvalues(fit)[1:5],3)
round(dfbetas(fit)[1:5],3)
round((dfbetas(fit)[1:5,2],3))
?dfbetas
round(dfbetas(fit)[1:5],3)
round(dfbetas(fit)[1:5])
round((dfbetas(fit)[1:5,2]))
round((dfbetas(fit)[1:5,2]),3)
data(mtcars)
fit<-lm(mpg~., data=mpg)
fit<-lm(mpg~., data=mtcars)
plot(fit)
par(mfrow =c(2,2))
fit<-lm(mpg~., data=mtcars)
plot(fit)
require(GGally)
install.packages("GGally")
library(GGally)
require(GGally)
g<-ggpairs(mtcars, lower = list(continuous ="smooth", params = c(method ="loess")))
?mtcars
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
fit<-lm(mpg~., data=mtcars)
summary(fit)$coef
fit1<-lm(mpg~cyl + wt, data = mtcars)
summary(fit1)$coef
vif(fit)
VIF(fit)
install.packages("usdm")
library(usdm)
vif(fit)
vif(fit1)
VIF(fit)
library(usdm)
require(usdm)
require(caret)
training.data<- read.csv("pml-training.csv",header = TRUE)
setwd("~/DataScienceClass/MachineLearning/LectureSlides/Week4")
training.data<- read.csv("pml-training.csv",header = TRUE)
setwd("~/DataScienceClass/MachineLearning/LectureSlides/Week4")
setwd("~/DataScienceClass/MachineLearning/Assignment")
training.data<- read.csv("pml-training.csv",header = TRUE)
training.data<-training.data[,!apply(is.na(training.data),2,any)]
dim(training.data)
training.data<-training.data[training.data$new_window=="yes",]
training.data<-training.data[,-(1:7)]
dim(training.data)
training.data<-training.data[,-(1:7)]
dim(training.data)
training.data<- read.csv("pml-training.csv",header = TRUE)
training.data<-training.data[,!apply(is.na(training.data),2,any)]
training.data<- read.csv("pml-training.csv")
training.data<-training.data[,!apply(is.na(training.data),2,any)]
training.data<-training.data[training.data$new_window=="yes",]
dim(training.data)
training.data<-training.data[,-(1:7)]
dim(training.data)
set.seed(1234)
modelFit<-train(classe~., data=train.data, preProcess=c("center","scale"), method ="glm")
set.seed(1234)
modelFit<-train(classe~., data=training.data, preProcess=c("center","scale"), method ="glm")
set.seed(1234)
modelFit<-train(classe~., data=training.data, method ="glm")
preProc <- preProcess(training.data[, -86], method = "pca", thresh = 0.99)
trainPC <- predict(preProc, training.data[, -86])
valid_testPC <- predict(preProc, training.data[, -86])
modelFit <- train(training.data$classe ~ ., method = "rf", data = trainPC, trControl = trainControl(method = "cv", number = 4), importance = TRUE)
wm <- read.csv("pml-training.csv", header = TRUE, na.strings = c("NA", ""))
wm_test <- read.csv("pml-testing.csv", header = TRUE, na.strings = c("NA", ""))
wm <- wm[,![,!apply(is.na(wm),2,any)]]
wm <- wm[,![,!apply(is.na(wm),2,any)]]
wm <- wm[,!apply(is.na(wm),2,any)]
wm<-wm[wm$new_window=="yes",]
dim(wm)
training.data<- read.csv("pml-training.csv",header = TRUE, na.strings = c("NA", " ", "#DIv/0!"))
dim(training.data)
training.data<-training.data[,!apply(is.na(training.data),2,any)]
dim(training.data)
training.data<-training.data[training.data$new_window=="yes",]
training.data<-training.data[,-(1:7)]
dim(training.data)
is.na(training.data)
sum(is.na(training.data))
dim(training.data)
training.data<-training.data[,!apply(is.na(training.data),2,any)]
dim(training.data)
c<-colSums(is.na(training.data))
c
trainset<-training.data[1:100,]
dim(trainset)
trainset<-trainset[,-(1:7)]
dim(trainset)
set.seed(1)
modelFit<-train(classe~., data=trainset, preProcess=c("center","scale"), method ="glm")
modelFit<-train(classe~., data=training.data, preProcess=c("center","scale"), method ="glm")
install.packages(caret)
install.packages("caret")
install.packages("caret")
data("iris")
inTrain<-createDataPartiion(y=iris$Species,p=0.7, list=FALSE)
inTrain<-createDataPartition(y=iris$Species,p=0.7, list=FALSE)
library(kernlab)
inTrain<-createDataPartition(y=iris$Species,p=0.7, list=FALSE)
library(caret)
inTrain<-createDataPartition(y=iris$Species,p=0.7, list=FALSE)
trainset<-iris[inTrain,]
testing<-iris[-inTrain,]
dim[trainset]
dim(trainset)
dim(testing)
modFit<-train(Species~., method ="rpart", data=trainset)
print(modFit$finalModel)
modFit<-train(Species~., method ="rf", data=trainset)
print(modFit$finalModel)
training.data<- read.csv("pml-training.csv",header = TRUE, na.strings = c("NA", " ", "#DIv/0!"))
training.data<-training.data[,!apply(is.na(training.data),2,any)]
training.data<-training.data[training.data$new_window=="yes",]
training.data<-training.data[,-(1:7)]
dim(training.data)
set.seed(1234)
modFit<-train(classe~., method ="rf", data=training.data)
modFit<-train(classe~., method ="rf", data=training.data)
training.data<- read.csv("pml-training.csv",header = TRUE, na.strings = c("NA", " ", "#DIV/0!"))
training.data<-training.data[,!apply(is.na(training.data),2,any)]
training.data<-training.data[training.data$new_window=="yes",]
training.data<-training.data[,-(1:7)]
dim(training.data)
modFit<-train(classe~., method ="rf", data=training.data)
modFit
M<-abs(cor(training.data[,-53]))
diag(M)<-0
which(M>0.8, arr.ind=T)
which(M>0.9, arr.ind=T)
cleanTrainData<-training.data[,-c(4,9,10,8,19,33,46,24,26,34,36)]
dim(cleanTrainData)
str(cleanTrainData)
prComp<-prcomp(training.data[,-42])
prComp<-prcomp(cleanTrainData[,-42])
preProc<-preProcess(cleanTrainData[,-42], method="pca",thresh = 0.95)
trainPC<-predict(preProc,cleanTrainData[,-42])
preProc
preProc<-preProcess(cleanTrainData[,-42], method="pca",thresh = 0.99)
trainPC<-predict(preProc,cleanTrainData[,-42])
preProc
modelFit <- train(cleanTrainData$classe ~ ., method = "rf", data = trainPC, trControl = trainControl(method = "cv", number = 4), importance = TRUE)
varImpPlot(modelFit$finalModel, sort = TRUE, type = 1, pch = 19, col = 1, cex = 1,
main = "Importance of the Individual Principal Components")
preProc<-preProcess(training.data[,-53], method="pca",thresh = 0.99)
trainPC<-predict(preProc,cleanTrainData[,-53])
trainPC<-predict(preProc,training.data[,-53])
modelFit <- train(training.data$classe ~ ., method = "rf", data = trainPC, trControl = trainControl(method = "cv", number = 4), importance = TRUE)
varImpPlot(modelFit$finalModel, sort = TRUE, type = 1, pch = 19, col = 1, cex = 1, main = "Importance of the Individual Principal Components")
modelFit_glm<-train(classe~., data=cleanTrainData, preProcess=c("center","scale"), method ="glm")
modelFit_rf <- train(cleanTrainData$classe ~ ., method = "rf", data = trainPC, trControl = trainControl(method = "cv", number = 4), importance = TRUE)
preProc<-preProcess(cleanTrainData[,-42], method="pca",thresh = 0.99)
trainPC<-predict(preProc,cleanTrainData[,-42])
modelFit <- train(cleanTrainData$classe ~ ., method = "rf", data = trainPC, trControl = trainControl(method = "cv", number = 4), importance = TRUE)
varImpPlot(modelFit$finalModel, sort = TRUE, type = 1, pch = 19, col = 1, cex = 1, main = "Importance of the Individual Principal Components")
varImpPlot(modelFit$finalModel, sort = TRUE, type = 1, pch = 18, col = 1, cex = 1, main = "Importance of the Individual Principal Components")
training.data<- read.csv("pml-training.csv",header = TRUE, na.strings = c("NA", " ", "#DIV/0!"))
training.data<-training.data[,!apply(is.na(training.data),2,any)]
training.data<-training.data[training.data$new_window=="no",]
dim(training.data)
training.data<-training.data[,-(1:7)]
M<-abs(cor(training.data[,-53]))
diag(M)<-0
which(M>0.9, arr.ind=T)
cleanTrainData<-training.data[,-c(4,9,10,8,19,33,46,24,26,34,36)]
preProc<-preProcess(cleanTrainData[,-42], method="pca",thresh = 0.99)
trainPC<-predict(preProc,cleanTrainData[,-42])
modelFit <- train(cleanTrainData$classe ~ ., method = "rf", data = trainPC, trControl = trainControl(method = "cv", number = 4), importance = TRUE)
varImpPlot(modelFit$finalModel, sort = TRUE, type = 1, pch = 19, col = 1, cex = 1, main = "Importance of the Individual Principal Components")
evaluation.data<-training.data[training.data$new_window=="yes",]
dim(evaluation.data)
training.data<- read.csv("pml-training.csv",header = TRUE, na.strings = c("NA", " ", "#DIV/0!"))
testing.data<- read.csv("pml-testing.csv",header = TRUE,na.strings = c("NA", " ", "#DIV/0!"))
training.data<-training.data[,!apply(is.na(training.data),2,any)]
training.data<-training.data[training.data$new_window=="no",]
evaluation.data<-training.data[training.data$new_window=="yes",]
dim(evaluation.data)
dim(training.data)
training.data<- read.csv("pml-training.csv",header = TRUE, na.strings = c("NA", " ", "#DIV/0!"))
training.data<-training.data[,!apply(is.na(training.data),2,any)]
evaluation.data<-training.data[training.data$new_window=="yes",]
dim(training.data)
dim(evaluation.data)
evaluationPC <- predict(preProc, evaluation.data[, -60])
evaluation.predict <- predict(modelFit, evaluationPC)
evalutation.check <- confusionMatrix(evaluation.data$classe, evaluation.predict)
evalutation.check$table
testPC <- predict(preProc, testing.data[, -160])
prediction.testdata<-predict(modelFit, testPC)
prediction.testdata
postResample(evaluation.predict, evaluation.data$classe)
training.data<- read.csv("pml-training.csv",header = TRUE, na.strings = c("NA", " ", "#DIV/0!"))
testing.data<- read.csv("pml-testing.csv",header = TRUE,na.strings = c("NA", " ", "#DIV/0!"))
dim(training.data)
dim(testing.data)
table(training.data$new_window)
table(testing.data$new_window)
# Remove the varialbes with NA in the training data set
training.data<-training.data[,!apply(is.na(training.data),2,any)]
# Split the traing data into training and evaluation two parts based on the new_window [yes/no]
evaluation.data<-training.data[training.data$new_window=="yes",]
training.data<-training.data[training.data$new_window=="no",]
# Remove the first 7 columns which are not used for model build
training.data<-training.data[,-(1:7)]
# The training data now reduced to contain 19216 obs of 53 variables (original containes 160 variables)
# standardizing the trainging data
## preObj<-preProcess(training.data[,-53],method=c("center","scale"))
set.seed(1234)
M<-abs(cor(training.data[,-53]))
diag(M)<-0
which(M>0.8, arr.ind=T)
# Remove the highly correlated predictors (r>0.8), resulting in 41 predictors plus classe
cleanTrainData<-training.data[,-c(4,9,10,8,19,33,46,24,26,34,36)]
preProc<-preProcess(cleanTrainData[,-42], method="pca",thresh = 0.99)
trainPC<-predict(preProc,cleanTrainData[,-42])
modelFit <- train(cleanTrainData$classe ~ ., method = "rf", data = trainPC, trControl = trainControl(method = "cv", number = 4), importance = TRUE)
varImpPlot(modelFit$finalModel, sort = TRUE, type = 1, pch = 19, col = 1, cex = 1, main = "Importance of the Individual Principal Components")
evaluationPC <- predict(preProc, evaluation.data[, -60])
evaluation.predict <- predict(modelFit, evaluationPC)
evalutation.check <- confusionMatrix(evaluation.data$classe, evaluation.predict)
evalutation.check$table
postResample(evaluation.predict, evaluation.data$classe)
testPC <- predict(preProc, testing.data[, -160])
prediction.testdata<-predict(modelFit, testPC)
prediction.testdata
pca_modelFit<-train(cleanTrainData$classe~.,method="glm",data=cleanTrainData)
